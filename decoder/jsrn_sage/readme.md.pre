Codinglib
======
This is **Codinglib**, a library for experimenting with algebraic coding theory.  
Copyright Johan S. R. Nielsen  
This is free software; every part of this released under the GNU
Public License version 3 or later (at your option).

The library is an extension to the Open Source computer algebra system Sage. I
have developed and maintain Codinglib for my own research on algebraic coding
theory. Most of the code is quite specific for this area.

Codinglib is partially self-documenting by the use doc-strings for every
function; however, it probably takes some effort to properly get to know it. It
is also quite idiosyncratic to my specific needs and workflow. Finally, in any
new version, I might change the name, semantics or calling convention of any
existing functions.

However, if you find some of its functionality interesting, I will gladly answer
specific questions to its usage and source code. You are also highly encouraged
to continue working on and improve any of the code; if you do, I would very much
like to know of your work. Also, I would be more than happy if any of my code
ended in the actual Sage distribution; I would work on this myself if I had more
time.



Deprecation Warning
======
Note that since the [ACTIS project][actis], major parts of Codinglib have incorporated into Sage or superseded by new implementations. The structure of codes and Sage's ability to work with algebraic codes out of the box have been greatly enhanced and designed much more carefully than in Codinglib.

I have unfortunately not gotten around to overhauling Codinglib to reflect these new changes in Sage. Note though that Codinglib still works directly on top of the newest Sage.


Overview
======
The following is a short description of each of the modules in Codinglib:

OVERVIEW_DUMMY

Furthermore, the library contains a number of `sheet` files: these are
similar to the notebook sheets, in that they contain snippets of code
demonstrating or testing the core functionality of Codinglib. Most of
these sheets are indeed intended as tests.

For instance, `rs_decoding.sheet` demonstrates all decoding algorithms
for Reed-Solomon codes included in Codinglib.

For Emacs users, sheet files can elegantly be handled when using
[sage-mode] by using the `sage-blocks` functionality.



Usage
======
Sage does not currently work well with non-spkg library code, so the importing
of Codinglib is a bit peculiar.

Codinglib is written using the Sage language extensions to Python but at the same
time is highly dependent on itself. To make this work in Sage currently, one
needs to preprocess Codinglib's .sage files and load all the generated .py files
at once as a Python package. In particular, using load/attach on the
.sage files from a Sage prompt will usually not work.

Method 1: Downloading to personal computer
-----------
-   Download the whole source (mirror git repo) and put in a folder `codinglib`.
    Add the parent folder to the SAGE_PATH environment variable.

    For example, you have created a folder

        \home\foo\bar\codinglib

    on your system, which contains the `.sage` files and the rest of Codinglib.
    You then add 

        \home\foo\bar

    to your `SAGE_PATH`.

-   Navigate to the `codinglib` folder and type the command

           make

    This will preprocess all the `.sage` files to reduce Sage syntax to standard
    Python.

-   From the Sage prompt, the library can be loaded with the command

        import codinglib 


-   From the Sage Notebook, if running on a local Sage server, add the following
    to one of the first cells of each sheet in which you intend to use the
    library:

        #auto
        import codinglib 
        all = __builtins__.all

    The last line is to restore the Python standard library function `all`. 

    In either of the above, you can of course replace `import codinglib` with the
    following to include commands directly in the namespace

        from codinglib import *



Method 2: On SageMathCloud
-----------
The SageMathCloud has excellent support for making modules within a project
which can be run from any worksheet in that project.

To add Codinglib to a project, you should make a copy of Codinglib's source in a
folder `codinglib` within your project. The most direct way to do this is:

- Create a folder `codinglib` in the project on SageMathCloud and go to it's Add
    Files page.

- Download Codinglib's source to your own machine.

- Open a file explorer and drag-and-drop all the downloaded files onto the Drop
Files-area. files into the SageMathCloud's add-page.

- In SageMathCloud, go to the `codinglib`-folder's page. In the upper right-hand
    corner is a "Terminal command" text area. Enter

        make build

    This will create `.py` files for each of the `.sage` files.

    SageMathCloud sometimes complains that the command timed out after 15
    seconds and was halted. This might mean nothing, or it might mean that some
    of the `.py`-files were not properly generated. In that case, simply run
    `make build` again.
    

- You should now be able to run

        from codinglib import *

    from any worksheet in this project.


If you later need to update Codinglib, you simply need to overwrite the `.sage.`
files with the new ones and rerun the `make` command.


Method 3: On a shared Sage Notebook sheet without write-access to its server
-----------
This is much more difficult as the Sage Notebook is not really geared to
support non-spkg add-on Sage libraries. The following method basically
dynamically downloads, preprocesses and imports Codinglib whenever one starts the
Notebook sheet. Thus, it is very slow to start up and a bit tedious. However, it
works without assuming any special rights on the Sage server. Once loaded, it
will of course run in the usual speed of the server.

In one of the first cells of the Notebook sheet, add the following code

    changeset = "ddd6636b2da0"
    baseurl ="https://bitbucket.org/jsrn/codinglib/raw/" + changeset + "/"

    # Manually load the remote functionality
    import imp
    from sage.misc.remote_file import get_remote_file
    remoteFile = get_remote_file(baseurl + "remote.py", verbose=False)
    remote = imp.new_module("remote")
    exec open(remoteFile).read() in remote.__dict__

    # Load the Sage library files and import them into the global namespace
    imports = remote.retrieve_codinglib(baseurl)
    for stm in imports:
        exec(stm)

Replace the string in changeset with the Git revision no. of the wanted version
of Codinglib, as provided by BitBucket. For the most recent version, visit

    https://bitbucket.org/jsrn/codinglib

and copy the revision no. of the top commit.

Executing this cell takes 10-20 seconds depending on your server's internet
connection.



Regards,  
Johan S. R. Nielsen  
jsrn@jsrn.dk  
[jsrn.dk]

[jsrn.dk]: http://jsrn.dk
[sage-mode]: https://bitbucket.org/gvol/sage-mode
[actis]: https://bitbucket.org/lucasdavid/sage_coding_project/wiki/Home
